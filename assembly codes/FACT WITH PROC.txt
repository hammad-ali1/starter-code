org 100h
.data
num dw 0
ten dw 10d 
count dw 0
next_line db 0ah, 0dh, '$'
.code
call input 
push num
call factorial
mov num, ax 
mov ah, 9
lea dx, next_line
int 21h

call display_num 
ret
    
input proc 
    push bx  
    push cx  
    push dx      
    mov cx, 0                  
    WHILE_INPUT: 
    mov ah, 1
    int 21h
    cmp al, 0dh
    je END_WHILE_INPUT     
    and ax, 0fh
    mov bx, ax
    mov ax, cx 
    mov dx, 10
    mul dx
    add ax, bx
    mov cx, ax
    jmp WHILE_INPUT
    END_WHILE_INPUT: 
    mov num, cx
    pop dx
    pop cx
    pop bx
    ret
endp       


display_num proc 
    ;save registers
    push ax  
    push bx  
    push dx
    push count
    mov ax, num
    cwd
    mov bx, 10  
    mov count, 0
    while: 
        cmp ax, 0
        je end_while
        div bx 
        push dx 
        cwd 
        inc count
        jmp while
    end_while:
    mov cx, count
    mov ah, 2 
    for:
        pop dx
        
        add dl, 30h
        int 21h
    loop for
    ;recover registers
    pop count
    pop dx
    pop bx
    pop ax
    ret
    
display_num endp   
          
 


factorial proc  ;takes parameter in ax variable and returns result in ax
    push bp
    mov bp, sp
    cmp bp[4], 1
    jg factorial_again
    mov ax, 1
    jmp return_factorial
    
    factorial_again: ;prepare parameters for next call
    mov bx, bp[4]
    dec bx
    push bx
    call factorial ;call function again
    mul bp[4] ;actual operation done here
    return_factorial: 
    pop bp
    ret 2
factorial endp